#include <Ethernet.h>
#include <TimerOne.h>
#include "LPD6803.h"
#include <math.h>

#include "ProgressBar.h"
#include <SPI.h>
#include <Time.h>

#define WAITTIME 2000
#define LITER_MAX 10000
#define NUM_LEDS 50

float curr_liters = 0;
int knipperd = 0;

int w = 1000; //wait time for debug

// Choose which 2 pins you will use for output.
// Can be any valid output pins.
int dataPin = 2;       // 'yellow' wire
int clockPin = 3;      // 'green' wire
// Don't forget to connect 'blue' to ground and 'red' to +5V

// Timer 1 is also used by the strip to send pixel clocks

// Set the first variable to the NUMBER of pixels. 20 = 20 pixels in a row
LPD6803 strip = LPD6803(NUM_LEDS, dataPin, clockPin);

//Mac address
int debug = 1;
byte mac[] = { 
  0x90, 0xA2, 0xDA, 0x0D, 0x78, 0x62 };
byte server[] = { 
  130,89,149,242}; //vestingbar.nl

EthernetClient client;

//dhcp renewal info
int h, m,s,d;
time_t t;

void setup(){  
  //debugging
  Serial.begin(9600);

  strip.setCPUmax(50);  // start with 50% CPU usage. up this if the strand flickers or is slow
  delay(w);
  strip.begin();
  delay(w);
  strip.show();
  delay(w);
  //Returns 1 on succesfull DHCP request, 0 on failure
  if(Ethernet.begin(mac) == 0){
    Serial.println("Failed to configure Ethernet using DHCP");
    // no point in carrying on, so do nothing forevermore:
    for(;;)
      ;
  }
  // print your local IP address:
  Serial.println(Ethernet.localIP());
  // get info for dhcp renewal
  t = now();
  h = hour(t);
  m = minute(t);
  s = second(t);
  d = day(t);
  delay(1000);

}

void debugmsg(String msg){
   if(debug){
      Serial.println(msg);
   } 
}

void loop(){
  debugmsg("DHCP Check");
  dhcpCheck();
  debugmsg("Getting beer info");
  getBierInfo();
  debugmsg("Setting new literMeter");
  ProgressBar literMeter = ProgressBar(&strip, LITER_MAX);
  debugmsg("Fixing colour");
  literMeter.setColor(31,28,0);
  literMeter.setProgress(curr_liters);
  literMeter.update(200);
  debugmsg("Checking if I have to blink");
  if (fmod(curr_liters,200) < 40 && curr_liters > 40) {
   if(!knipperd){
     debugmsg("Tank leeg!");
     int j;
     for (j = 0 ; j < 10 ; j++) {
     literMeter.setColor(31,0,0);
     literMeter.update(200);
     literMeter.setColor(31,28,0);
     literMeter.update(200);
     }
     
     knipperd = 1;
   }
  }else{
     knipperd = 0;
  }
  delay(WAITTIME);
}

void getBierInfo(){
  //Server connection
  connectToVB();
  int bytesAvail = client.available();
  if(bytesAvail){
    readPastHeader(&client);
    debugmsg("Read: ");
    String result = "";
    char c = client.read();
    while(c != -1){
      Serial.print(c);
      result.concat(c);
      c = client.read();
    }
    char charBuf[50];
    result.toCharArray(charBuf,50);
    curr_liters = atof(charBuf);
  }
}

int connectToVB(){
  client.stop(); 
  delay(2000);
  if(client.connect(server, 80)){
    debugmsg("Connected");
    client.println("GET /docs/bierstanden.txt HTTP/1.0");
    client.println();
    delay(2000);
    return 1;
  }
  Serial.println("Connection failed");
  return 0;
}

void dhcpCheck(){
  time_t n = now();
  if((hour(n) - h) > 23){
    byte i = Ethernet.maintain();
    debugmsg("Requested DHCP update, ");
    switch (i){
    case 0:
      debugmsg("nothing happened");  
      break;
    case 1:
      debugmsg("renew failed");
      break;
    case 2:
      debugmsg("renew success");
      h = hour(n);
      break;
    case 3:
      debugmsg("rebind fail");
      break;
    case 4:
      debugmsg("rebind success");
      h = hour(n);
      break;
    default:
      Serial.println("Error getting DHCP!");
      break;
    }
  }
} 

bool readPastHeader(Client *pClient)
{
  bool bIsBlank = true;
  while(true)
  {
    if (pClient->available()) 
    {
      char c = pClient->read();
      if(c=='\r' && bIsBlank)
      {
        // throw away the /n
        c = pClient->read();
        return true;
      }
      if(c=='\n')
        bIsBlank = true;
      else if(c!='\r')
        bIsBlank = false;
    }
  }
}









